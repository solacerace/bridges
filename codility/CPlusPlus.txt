		 1,000,000,000
int32 		-2,147,483,648


	[-2,147,483,648, 2,147,483,647]			   

<climits>
INT_MIN
INT_MAX



#include "stdint.h"		// C header
#include <cstdint>		// C++ header
int64_t




# Set the Array to Size 20000
std::vector<CustomClass *> whatever(20000);


# Set the Array to Size length and values = 0
std::vector<int> vector1(length, 0);



# sizeof(int)=4, sizeof(long)=8
cout << "sizeof(int)=" << sizeof(int) << ", sizeof(long)=" << sizeof(long) << endl;



# Result with the test case
https://codility.com/demo/results/training5HEEUG-8DE/

https://codility.com/demo/results/training4QRPRM-EE2/

https://codility.com/demo/results/trainingX8N8AR-974/

https://codility.com/demo/results/trainingEJ3HRD-GZP/

https://codility.com/demo/results/trainingG68ENY-ZSW/


LONG COUNTERS
If using addition or multiplication counter as long datatype then the numbers added/mulitpleid should also be long.



TEST CASES
=====================================================
Correctness TEST
1. Extremely Single
	- A single element - each of the values +ve,-ve, 0
	- [-5]
	- [0]
	- [5]
	- [-2147483648]
	- [2147483647]
2. Simple Element
	- +ve and -ve	[-1, -2, -3, 4, 5, 6]
	- +ve Only 		[1, 2, 3, 4, 5, 6]
	- -ve Only 		[-1, -2, -3, -4, -5, -6]
	- +ve and 0 	[0, 1, 2, 3, 4, 5, 6]
3. Extreme int Min, MAX
	[-2147483648, 2147483647]


	
2,147,483,647
2,147,483,647

	
Solutions for Codility Questions
============================================	
https://rafal.io/archives.html
http://alexandrastech.blogspot.hk/2014/10/solution-to-codility-lesson-11-ladder.html

	
	
https://codility.com/demo/results/training4RV8SS-7P7/





================================================================================================




